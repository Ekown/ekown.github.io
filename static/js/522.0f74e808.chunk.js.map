{"version":3,"file":"static/js/522.0f74e808.chunk.js","mappings":"mKACA,EAAwB,qB,SCElBA,EAAQ,SAACC,GACb,OACE,gBAAKC,UAAYC,EAAe,eAAiBF,EAAMG,OAAS,qBAAuB,IAAvF,UACE,eAAIF,UAAU,OAAd,SAAuBD,EAAMI,aAOnCL,EAAMM,aAAe,GAErB,S,mGCdA,EAA0B,yB,SCEpBC,EAAU,WACd,OACE,iBAAKL,UAAYC,EAAiB,eAAlC,WACE,gBAAKD,UAAU,MAAf,UACE,gBAAKA,UAAU,mCAAf,UACE,gBAAKA,UAAU,iBAGnB,gBAAKA,UAAU,MAAf,UACE,gBAAKA,UAAU,0CAAf,UACE,4BACE,8KAE2B,cAAGM,KAAK,gCAAR,kCAF3B,yHAIA,sYAIA,wKAYZD,EAAQD,aAAe,GAEvB,QCnCA,EAAwB,qB,UCKlBG,EAAQ,WACZ,OAAsBC,EAAAA,EAAAA,IAAU,CAC9BC,UAAW,GACXC,aAAa,IAFf,eAAOC,EAAP,KAAYT,EAAZ,KAKA,OACE,8BACE,iBAAKF,UAAWC,EAAe,aAAcW,KAAK,QAAQD,IAAKA,EAA/D,WACE,SAACb,EAAA,EAAD,CAAOK,QAAQ,QAAQD,OAAQA,KAC/B,gBAAKF,UAAU,UAAf,UACE,SAAC,EAAD,YASVO,EAAMH,aAAe,GAErB,S,iXC1BA,IAAMS,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwCC,E,SA6B5BC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QAAO,SAACC,GAAD,YAA0BP,IAAjBE,EAAQK,MACxBC,KAAI,SAACD,GACJ,OAAUA,EAAV,KACU,SAARA,GAnBWE,EAmBgBP,EAAQO,OAjBrCb,EAAQc,IAAID,KAChBX,GAAU,EACVF,EAAQe,IAAIF,EAAMX,EAAOc,aAFKhB,EAAQiB,IAAIJ,IADxB,IAkB+BP,EAAQK,IAnB3D,IAAmBE,KAsBdG,W,SA4DWE,EACdC,EACAC,EACAd,EACAe,GAEA,QAHAf,IAAAA,IAAAA,EAAoC,SACpCe,IAAAA,IAAAA,EAAiBlB,GAGwB,qBAAhCmB,OAAOC,2BACKnB,IAAnBiB,EACA,CACA,IAAMG,EAASL,EAAQM,wBAWvB,OAVAL,EAASC,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQR,EACRS,kBAC+B,kBAAtBtB,EAAQZ,UAAyBY,EAAQZ,UAAY,EAC9DmC,KAAM,EACNC,mBAAoBN,EACpBO,iBAAkBP,EAClBQ,WAAYR,IAEP,aAKT,MAnFF,SAAwBlB,GAEtB,IAAI2B,EAAK5B,EAAYC,GACjB4B,EAAWpC,EAAYmB,IAAIgB,GAE/B,IAAKC,EAAU,CAEb,IACIC,EADEC,EAAW,IAAIrC,IAGfsC,EAAW,IAAId,sBAAqB,SAACe,GACzCA,EAAQC,SAAQ,SAACC,G,MAGTrD,EACJqD,EAAMd,gBACNS,EAAWM,MAAK,SAAC/C,GAAD,OAAe8C,EAAMZ,mBAAqBlC,KAGxDY,EAAQoC,iBAA8C,qBAApBF,EAAMG,YAG1CH,EAAMG,UAAYxD,GAGpBiD,OAAA,EAAAA,EAASnB,IAAIuB,EAAMb,UAAnBS,EAA4BG,SAAQ,SAACnB,GACnCA,EAASjC,EAAQqD,WAGpBlC,GAGH6B,EACEE,EAASF,aACRS,MAAMC,QAAQvC,EAAQZ,WACnBY,EAAQZ,UACR,CAACY,EAAQZ,WAAa,IAE5BwC,EAAW,CACTD,GAAAA,EACAI,SAAAA,EACAD,SAAAA,GAGFtC,EAAYiB,IAAIkB,EAAIC,GAGtB,OAAOA,EAoC4BY,CAAexC,GAA1C2B,EAAR,EAAQA,GAAII,EAAZ,EAAYA,SAAUD,EAAtB,EAAsBA,SAGlBW,EAAYX,EAASnB,IAAIE,IAAY,GAQzC,OAPKiB,EAAStB,IAAIK,IAChBiB,EAASrB,IAAII,EAAS4B,GAGxBA,EAAUC,KAAK5B,GACfiB,EAASnB,QAAQC,GAEV,WAEL4B,EAAUE,OAAOF,EAAUG,QAAQ9B,GAAW,GAErB,IAArB2B,EAAUI,SAEZf,EAAQ,OAAQjB,GAChBkB,EAASe,UAAUjC,IAGC,IAAlBiB,EAASiB,OAEXhB,EAASiB,aACTxD,EAAW,OAAQmC,K,yJCzJzB,SAASsB,EACPvE,GAEA,MAAiC,oBAAnBA,EAAMwE,S,IAoDTC,EAAb,Y,QAWE,WAAYzE,G,aACV0E,EAAAA,EAAAA,KAAAA,KAAM1E,IAAN,MA2BF2E,KAAuB,K,EACvBC,aAAoC,K,EAoCpCC,WAAa,SAACF,GACRD,EAAKC,OAEPD,EAAKN,YAEAO,GAASD,EAAK1E,MAAMW,aAAgB+D,EAAK1E,MAAM8E,MAElDJ,EAAKK,SAAS,CAAE5E,SAAUuE,EAAK1E,MAAMgF,cAAexB,WAAOpC,KAI/DsD,EAAKC,KAAOA,GAAc,KAC1BD,EAAKO,e,EAGPC,aAAe,SAAC/E,EAAiBqD,GAC3BrD,GAAUuE,EAAK1E,MAAMW,aAEvB+D,EAAKN,YAEFG,EAAgBG,EAAK1E,QAGxB0E,EAAKK,SAAS,CAAE5E,OAAAA,EAAQqD,MAAAA,IAEtBkB,EAAK1E,MAAMmF,UAEbT,EAAK1E,MAAMmF,SAAShF,EAAQqD,IA1F9BkB,EAAKU,MAAQ,CACXjF,SAAUH,EAAMgF,cAChBxB,WAAOpC,G,IAfbiE,G,EAAAA,G,sEAAA,yBAAAC,EAmBEC,mBAAA,SAAmBC,GAGfA,EAAUC,aAAeC,KAAK1F,MAAMyF,YACpCD,EAAU3D,OAAS6D,KAAK1F,MAAM6B,MAC9B2D,EAAU9E,YAAcgF,KAAK1F,MAAMU,WACnC8E,EAAUV,OAASY,KAAK1F,MAAM8E,MAC9BU,EAAU9B,kBAAoBgC,KAAK1F,MAAM0D,iBACzC8B,EAAUG,QAAUD,KAAK1F,MAAM2F,QAE/BD,KAAKtB,YACLsB,KAAKT,gBA9BXK,EAkCEM,qBAAA,WACEF,KAAKtB,YACLsB,KAAKf,KAAO,MApChBW,EA0CEL,YAAA,WACE,GAAKS,KAAKf,OAAQe,KAAK1F,MAAM8E,KAA7B,CACA,MAOIY,KAAK1F,MANPU,EADF,EACEA,UACAmB,EAFF,EAEEA,KACA4D,EAHF,EAGEA,WACA/B,EAJF,EAIEA,gBACAiC,EALF,EAKEA,MACAtD,EANF,EAMEA,eAGFqD,KAAKd,aAAe1C,EAClBwD,KAAKf,KACLe,KAAKR,aACL,CACExE,UAAAA,EACAmB,KAAAA,EACA4D,WAAAA,EAEA/B,gBAAAA,EAEAiC,MAAAA,GAEFtD,KAjENiD,EAqEElB,UAAA,WACMsB,KAAKd,eACPc,KAAKd,eACLc,KAAKd,aAAe,OAxE1BU,EA2GEO,OAAA,WACE,IAAKtB,EAAgBmB,KAAK1F,OAAQ,CAChC,MAA0B0F,KAAKN,MAAvBjF,EAAR,EAAQA,OAAQqD,EAAhB,EAAgBA,MAChB,OAAOkC,KAAK1F,MAAMwE,SAAS,CAAErE,OAAAA,EAAQqD,MAAAA,EAAO5C,IAAK8E,KAAKb,aAGxD,MAeIa,KAAK1F,MAdPwE,EADF,EACEA,SACAsB,EAFF,EAEEA,GACAC,EAHF,EAGEA,IAWG/F,E,oIAdL,MAiBA,OAAOgG,EAAAA,cACLF,GAAMC,GAAO,MADRC,EAAAA,CAEHpF,IAAK8E,KAAKb,YAAe7E,GAC3BwE,IArIN,GAA4BwB,EAAAA,W,SC5BZvF,EAAU,G,iBAUD,KATvBC,EAAAA,EAAAA,UACAiF,EAAAA,EAAAA,MACAjC,EAAAA,EAAAA,gBACA+B,EAAAA,EAAAA,WACA5D,EAAAA,EAAAA,KACAlB,EAAAA,EAAAA,YACAmE,EAAAA,EAAAA,KACAE,EAAAA,EAAAA,cACA3C,EAAAA,EAAAA,eAEM+B,EAAY4B,EAAAA,SAClB,EAA0BA,EAAAA,SAAsB,CAC9C7F,SAAU6E,IADLI,EAAP,KAAcL,EAAd,KAGMkB,EAASD,EAAAA,aACb,SAACrB,QAC2BvD,IAAtBgD,EAAU8B,UACZ9B,EAAU8B,UACV9B,EAAU8B,aAAU9E,GAIlB0D,GAEAH,IACFP,EAAU8B,QAAUhE,EAClByC,GACA,SAACxE,EAAQqD,GACPuB,EAAS,CAAE5E,OAAAA,EAAQqD,MAAAA,IAEfA,EAAMd,gBAAkB/B,GAAeyD,EAAU8B,UAEnD9B,EAAU8B,UACV9B,EAAU8B,aAAU9E,KAGxB,CACES,KAAAA,EACA4D,WAAAA,EACA/E,UAAAA,EAEAgD,gBAAAA,EAEAiC,MAAAA,GAEFtD,MAMN,CAGEuB,MAAMC,QAAQnD,GAAaA,EAAUsB,WAAatB,EAClDmB,EACA4D,EACA9E,EACAmE,EACApB,EACArB,EACAsD,KAKJQ,EAAAA,EAAAA,YAAU,WACH/B,EAAU8B,UAAWd,EAAM5B,OAAU7C,GAAgBmE,GAGxDC,EAAS,CACP5E,SAAU6E,OAKhB,IAAMoB,EAAS,CAACH,EAAQb,EAAMjF,OAAQiF,EAAM5B,OAO5C,OAJA4C,EAAOxF,IAAMwF,EAAO,GACpBA,EAAOjG,OAASiG,EAAO,GACvBA,EAAO5C,MAAQ4C,EAAO,GAEfA,EDxDI3B,EAIJ4B,YAAc,SAJV5B,EAKJpE,aAAe,CACpBK,UAAW,EACXC,aAAa,EACbqE,eAAe,I,iEEpEJ,SAASsB,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAI3C,MAAMC,QAAQ0C,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIC,EAAY,MAAPF,EAAc,KAAyB,qBAAXG,QAA0BH,EAAIG,OAAOC,WAAaJ,EAAI,cAE3F,GAAU,MAANE,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKV,KAAQQ,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAK9C,KAAK4C,EAAGQ,QAETZ,GAAKM,EAAK3C,SAAWqC,GAH4BO,GAAK,IAK5D,MAAOM,GACPL,GAAK,EACLH,EAAKQ,EACL,QACA,IACON,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBP,EAAKC,KAAM,EAAAc,EAAA,GAA2Bf,EAAKC,IGLjF,WACb,MAAM,IAAIe,UAAU,6IHIgF","sources":["webpack://ekown.github.io/./src/components/common/atoms/Title/Title.module.scss?8504","components/common/atoms/Title/Title.js","webpack://ekown.github.io/./src/components/common/molecules/Profile/Profile.module.scss?aeec","components/common/molecules/Profile/Profile.js","webpack://ekown.github.io/./src/components/sections/About/About.module.scss?3d66","components/sections/About/About.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Title_title__mIQHK\"};","import React from 'react';\nimport styles from './Title.module.scss';\n\nconst Title = (props) => {\n  return (\n    <div className={ styles.title + ' underline ' + (props.inView ? ' underline-active ' : '')}>\n      <h2 className=\"pt-3\">{ props.content }</h2>\n    </div>\n  );\n}\n\nTitle.propTypes = {};\n\nTitle.defaultProps = {};\n\nexport default Title;\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__+Vk3B\"};","import React from 'react';\nimport styles from './Profile.module.scss';\n\nconst Profile = () => {\n  return (\n    <div className={ styles.profile + \" row mt-md-4\" }>\n      <div className=\"row\">\n        <div className=\"col-12 picture-row h-center mt-4\">\n          <div className=\"picture\"></div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"text d-flex align-items-center h-center\">\n          <div>\n            <p>\n              Hi! My name is Eron and I'm a software engineer with a passion for improving old ideas and creating new exciting stuff.\n              I'm currently working at <a href=\"https://www.crmonline.com.au/\">CRM Online Australia</a> building solutions for the SugarCRM platform and implementing features for mobile applications built using Ionic.\n            </p>\n            <p>\n              As a software engineer, I like bridging the gap between engineering and design, combining my technical expertise with my keen eye for aesthetics to produce a stunning product.\n              My long-term objective is to constantly design scalable and efficient apps that provide engaging, pixel-perfect user experiences while handling user data with elegance performance-wise.\n            </p>\n            <p>\n              When I'm not in front of a computer, I'm typically working out, watching Netflix, or crossing off another item on my bucket list.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nProfile.propTypes = {};\n\nProfile.defaultProps = {};\n\nexport default Profile;\n","// extracted by mini-css-extract-plugin\nexport default {\"about\":\"About_about__h8-vH\"};","import React from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport Profile from '../../common/molecules/Profile/Profile';\nimport styles from './About.module.scss';\nimport Title from '../../common/atoms/Title/Title';\n\nconst About = () => {\n  const [ref, inView] = useInView({\n    threshold: 0.5,\n    triggerOnce: true,\n  });\n\n  return (\n    <section>\n      <div className={styles.about + ' container'} name=\"about\" ref={ref}>\n        <Title content=\"about\" inView={inView} />\n        <div className=\"content\">\n          <Profile />\n        </div>\n      </div>\n    </section>\n  );\n}\n\nAbout.propTypes = {};\n\nAbout.defaultProps = {};\n\nexport default About;\n","import { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["Title","props","className","styles","inView","content","defaultProps","Profile","href","About","useInView","threshold","triggerOnce","ref","name","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","instance","thresholds","elements","observer","entries","forEach","entry","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","length","unobserve","size","disconnect","isPlainChildren","children","InView","_this","node","_unobserveCb","handleNode","skip","setState","initialInView","observeNode","handleChange","onChange","state","_inheritsLoose","_proto","componentDidUpdate","prevProps","rootMargin","this","delay","componentWillUnmount","render","as","tag","React","setRef","current","useEffect","result","displayName","_slicedToArray","arr","i","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","value","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}