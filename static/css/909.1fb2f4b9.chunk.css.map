{"version":3,"file":"static/css/909.1fb2f4b9.chunk.css","mappings":"AAIA,0BACI,cAEA,sBADA,kBACA,CCsiBA,oCC5cgB,0BACI,gCFrFhB,+BACI,uBGRJ,uBACI,4BACA,gBAEA,mBADA,kBAEA,yBFkiBR,oCC5cgB,uBACI,0CD2cpB,yDC5cgB,uBACI,0BD2cpB,yDC5cgB,uBACI,0BD2cpB,0DC5cgB,uBACI,0BD2cpB,qCC5cgB,uBACI,0BD2cpB,yDC5cgB,uBACI,4BD2cpB,0DC5cgB,uBACI,4BD2cpB,qCC5cgB,uBACI,4BE9FxB,iCACI,qBACA,kBAMQ,gDACI,UAGJ,oDACI,UAGJ,kDACI,eACA,UACA,QAGJ,oDACI,WACA,UAMR,8CACI,YAEA,uBADA,UACA,CHwgBR,oCC5cgB,8CACI,yCD2cpB,yDC5cgB,8CACI,cD2cpB,yDC5cgB,8CACI,cD2cpB,0DC5cgB,8CACI,cD2cpB,qCC5cgB,8CACI,cExDZ,oDACI,sCAIR,4CACI,OACA,kBACA,MACA,WAEA,gDACI,eAGJ,iDACI,aChDM,CDoDd,0CACI,cACA,UACA,kBACA,+BACA,UAGJ,8CAKI,yBAJA,SAKA,eAJA,OAKA,cACA,cALA,kBACA,QAKA,YAEA,oDACI,kBCxEM,CDyEN,WACA,eEhFhB,gCACI,WACA,eLuiBA,oCC5cgB,gCACI,gBD2cpB,yDC5cgB,gCACI,eIvFhB,8CAEI,aADA,eACA,CLgiBR,oCC5cgB,8CACI,oBIjFZ,2DACI,eACA,gBACA,iBLyhBZ,oCC5cgB,2DACI,iCIxEZ,mDAKI,cAFA,cAFA,eACA,gBAEA,wBDlBC,CJiiBb,oCC5cgB,mDACI,eI7DhB,4CAEI,eACA,aAFA,eAEA,CLqgBR,oCC5cgB,4CACI,kCK9FxB,sCAEI,YNuiBA,oCC5cgB,sCACI,aD2cpB,yDC5cgB,sCACI,aKvFZ,qEACI,YNiiBZ,oCC5cgB,qEACI,aD2cpB,yDC5cgB,qEACI,aKjFhB,0HACI,0BAGA,WAFA,kBACA,QACA","sources":["components/sections/Projects/Projects.module.scss","../node_modules/include-media/dist/_include-media.scss","core/theme/mixins/responsive.scss","components/common/atoms/Title/Title.module.scss","components/common/molecules/ProjectCard/ProjectCard.module.scss","core/theme/theme.scss","components/common/molecules/CustomModal/CustomModal.module.scss","components/common/atoms/CustomCarousel/CustomCarousel.module.scss"],"sourcesContent":["\n                    @import \"src/core/theme/theme\";\n                    @import \"src/core/theme/mixins/responsive.scss\";\n                \n.projects {\n    color: #313131;\n    padding-top: 2.5rem;\n    padding-bottom: 2.5rem;\n\n    @include responsive('padding-left', '0');\n    @include responsive('padding-right', '0');\n\n    :global {\n        .row {\n            justify-content: center;\n        }\n    }\n}","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","@import '~include-media/dist/_include-media';\n\n// Override default breakpoints with app-defined breakpoints\n$breakpoints : (\n    phone: 576px,\n    tablet: 768px,\n    laptop: 992px,\n    desktop: 1200px,\n);\n\n// Media query arguments to be passed based on the responsiveness\n$media-queries: (\n    phone: ('screen', '<=phone'),\n    tablet: ('screen', '>phone', '<=tablet'),\n    laptop: ('screen', '>tablet', '<=laptop'),\n    desktop: ('screen', '>laptop', '<=desktop'),\n    wide: ('screen', '>desktop'),\n);\n\n///\n/// Generates a parsed media query using the screen size definitions\n/// @author Eron Tancioco\n/// @access private\n/// @param {String} $screen-size  - Screen size\n///\n/// @return {void}\n///\n@mixin parse-media-query($screen-size) {\n    // Check if the screen size is defined\n    @if map-has-key($media-queries, $screen-size) {\n        // Get the media query arguments using the screen size\n        $media-arguments: map-get($media-queries, $screen-size);\n\n        // Pass the media query arguments to the include-media mixin \n        @include media($media-arguments...) {\n            @content\n        }\n    } @else {\n        $_: im-log('Unknown responsive screen size `#{$screen-size}`.');\n    }\n}\n\n///\n/// Checks if the string has '!' character in the end to indicate importance\n/// @author Eron Tancioco\n/// @access private\n/// @param {String} $style-value - String style value\n///\n/// @return {Boolean}\n///\n@function check-important($style-value) {\n    @return if(str-index($style-value, '!') == str-length($style-value), true, false);\n}\n\n///\n/// Parses the string\n/// @author Eron Tancioco\n/// @access private\n/// @param {String} $style-value - String style value\n///\n/// @return {string}\n///\n@function parse-string($style-value) {\n    @if (type-of($style-value) == 'string') {\n        @if (check-important($style-value)) {\n            // @TODO: Add error checking when the end part of the string is \"!important!\"\n            @return str-insert($style-value, ' ', str-length($style-value)) + 'important';\n        } @else {\n            @return $style-value;\n        }        \n    } @else {\n        @return $style-value;\n    }\n}\n\n///\n/// Constructs the parsed media queries for each passed screen size style\n/// @author Eron Tancioco\n/// @param {String} $style-name - Name of the CSS style\n/// @param {Arglist} $screen-size-style - List of different screen size style values\n///\n/// @return {void}\n///\n@mixin responsive($style-name, $screen-size-style...) {\n    @if (length($screen-size-style) == 0) {\n        $_: im-log('Must have at least 1 screen size style.');\n    } @else {\n        $media-query-keys: map-keys($media-queries);\n\n        @for $i from 1 through length($screen-size-style) {\n            $current-media-query-key: nth($media-query-keys, $i);\n            $current-size-style: nth($screen-size-style, $i);\n\n            @if ($current-size-style != null) {\n                $screen-size-style-key: parse-string($current-size-style);\n\n                @include parse-media-query($current-media-query-key) {\n                    & {\n                        #{$style-name}: #{$screen-size-style-key};\n                    }\n                }\n            }\n        }\n    }\n}\n\n// @TODO: Create your first working npm package for this mixin","\n                    @import \"src/core/theme/theme\";\n                    @import \"src/core/theme/mixins/responsive.scss\";\n                \n.title {\n    :global {\n        h2 {\n            font-family: \"Lato\", sans-serif;;\n            font-weight: 300;\n            text-align: center;\n            letter-spacing: 1px;\n            text-transform: uppercase;\n        \n            @include responsive('font-weight', '400');\n            @include responsive('font-size', '22px!', '30px!', '30px!', '30px!', '30px!');\n            @include responsive('padding-top', null, null, '50px!', '55px!', '60px!');\n        }\n    }\n}","\n                    @import \"src/core/theme/theme\";\n                    @import \"src/core/theme/mixins/responsive.scss\";\n                \n.projectcard {\n    display: inline-block;\n    position: relative;\n\n    $parent: &;\n\n    &:hover {\n        :global {\n            .overlay {\n                opacity: 1;\n            }\n\n            .project-img {\n                opacity: 0;\n            }\n\n            .card-text {\n                cursor: default;\n                opacity: 1;\n                top: 24%;\n            }\n\n            .card-button {\n                bottom: 24%;\n                opacity: 1;\n            }\n        }\n    }\n\n    :global {\n        .project-img {\n            height: 100%;\n            width: 100%;\n            transition: opacity 0.5s;\n            @include responsive('width', '100vw');\n            @include responsive('max-width', '100%');\n            @include responsive('height', '240px', '300px', '300px', '300px', '300px');\n\n            &:hover {\n                transition: background 0.3s ease-in-out;\n            }\n        }\n\n        .card-text {\n            left: 0;\n            position: absolute;\n            top: 0;\n            width: 100%;\n\n            div {\n                font-size: 16pt;\n            }\n\n            span {\n                color: $complementary-color;\n            }\n        }\n\n        .overlay {\n            color: #1b242f;\n            opacity: 0;\n            text-align: center;\n            transition: all 0.3s ease-in-out;\n            z-index: 2;\n        }\n\n        .card-button {\n            bottom: 0;\n            left: 0;\n            position: absolute;\n            right: 0;\n            border: 2px solid $complementary-color;\n            font-size: 13pt;\n            margin: 0 auto;\n            padding: 7px 0;\n            width: 170px;\n\n            &:hover {\n                background: $complementary-color;\n                color: #fff;\n                cursor: pointer;\n            }\n        }\n    }\n}","$body-color: #fff;\n$body-font-weight: 400;\n$font-family-sans-serif: 'Raleway', sans-serif;\n\n// Removes the default gutter in the x-axis for rows\n$grid-gutter-width: 0;\n\n// Color palette theme\n// https://colorhunt.co/palette/f1f6f9394867212a3e9ba4b5\n$primary-color: #394867;\n$complementary-color: #2a9d8f;\n$secondary-color: #212A3E;\n$tertiary-color: #9BA4B5;\n$quaternary-color: #F1F6F9;\n$highlight-color: #088395;","\n                    @import \"src/core/theme/theme\";\n                    @import \"src/core/theme/mixins/responsive.scss\";\n                \n.CustomModal {\n    color: black;\n    max-width: 50vw;\n    \n    @include responsive('max-width', '100%', '80%');\n\n    :global {\n        .modal-header {\n            text-align: left;   \n            padding: 1rem;\n            \n            @include responsive('padding', '.5rem 1rem');\n\n            .modal-title {\n                font-size: 22pt;\n                font-weight: 600;\n                line-height: 20pt;\n\n                @include responsive('font-size', '16pt');\n                @include responsive('line-height', '30pt');\n            }\n\n            .tag {\n                font-size: 11pt;\n                font-weight: 600;\n                display: block;\n                text-transform: uppercase;\n                color: $tertiary-color;\n\n                @include responsive('font-size', '8pt');\n            }\n        }\n        \n        .modal-body {\n            text-align: left;\n            font-size: 11pt;\n            padding: 1rem;\n\n            @include responsive('font-size', '9pt');\n            @include responsive('padding', '.5rem 1rem');\n        }\n    } \n}","\n                    @import \"src/core/theme/theme\";\n                    @import \"src/core/theme/mixins/responsive.scss\";\n                \n.CustomCarousel {\n\n    height: 50vh;\n    @include responsive('height', '45vh', '45vh');\n\n    :global {\n        .carousel-inner {\n            .carousel-item {\n                height: 50vh;\n                @include responsive('height', '45vh', '45vh');\n            }\n        }\n\n        .carousel-control-prev, .carousel-control-next {\n            background: rgba(0,0,0,0.3);\n            position: absolute;\n            top: auto;\n            height: 25%;\n        }\n    }\n}"],"names":[],"sourceRoot":""}